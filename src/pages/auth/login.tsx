import { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head';
import { useRouter } from 'next/router'
import { signIn } from "next-auth/react"
import { FormikBag, useFormik } from 'formik';
import { authOptions } from '../api/auth/[...nextauth]';
import { useEffect, useState } from 'react';

export const getServerSideProps: GetServerSideProps = async (context) => {
    // returns { id: episode.itunes.episode, title: episode.title}
    const query = context?.query;
    //you can make DB queries using the data in context.query

    return {
        props: { query: query }
    }
}

const LoginForm = (props: any) => {
    // Note that we have to initialize ALL of fields with values. These
    // could come from props, but since we don’t want to prefill this form,
    // we just use an empty string. If we don’t do this, React will yell
    // at us.

    const formik = useFormik({
        initialValues: {
            username: '',
            password: '',
        },
        onSubmit: (values, { setSubmitting }) => {
            
            setSubmitting(true);
            if (values.username && values.password) {
                signIn("credentials", { username: values.username, password: values.password, callbackUrl: `${window.location.origin}/main` })
            }
            
        },
    });

    return (
        <form onSubmit={formik.handleSubmit} className='w-2/3'>
            {formik.isSubmitting || props.auth?.query?.error ? <div className={'rounded-lg p-4 bg-purple-100 font-extrabold leading-normal text-center'}>{formik.isSubmitting ? 'You will be redirected shortly...' : props.auth?.query.error === 'CredentialsSignin' ? 'Error. Please Try Again!' : ''}</div> : ''}
            <div className='flex flex-col gap-4'>
                <label htmlFor="username" className='text-2xl font-bold'>Username</label>
                <input className='border-black border-2 p-4 rounded-md text-2xl font-bold'
                    id="username"
                    name="username"
                    type="text"
                    onChange={formik.handleChange}
                    value={formik.values.username}
                    required={true}
                />

                <label htmlFor="password" className='text-2xl font-bold'>Password</label>
                <input className='border-black border-2 p-4 rounded-md text-2xl font-bold'
                    id="password"
                    name="password"
                    type="password"
                    onChange={formik.handleChange}
                    value={formik.values.password}
                    required={true}
                />
                <button type="submit" className='px-6 py-4 rounded-lg bg-purple-300 text-gray-700 leading-normal font-extrabold'>Login</button>
            </div>
        </form>
    );
};

const LoginPage: NextPage = (props) => {
    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
                <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
                    Create <span className="text-purple-300">T3</span> App
                </h1>
                <LoginForm auth={props} />
            </main>
        </>
    );
};




export default LoginPage;